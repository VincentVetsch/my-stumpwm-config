;; -*-lisp-*-

;;; TODOs:
;;; - mode-line
;;; - Lock screen
;;; - Session management
;;;   - Log out
;;;   - Switch user
;;;   - Reboot
;;;   - Power off

(in-package :stumpwm)
(ql:quickload "str")
(ql:quickload "xembed")

(set-module-dir #P"/home/herbert/opt/stumpwm/contrib/")
(setf *mode-line-position* :bottom)

;; (load-module "app-menu")
;; (load-module "battery-portable")
(load-module "cpu")
(load-module "mem")
(load-module "net")
(load-module "wifi")
(load-module "stumptray")

(setf *screen-mode-line-format*
      ;; (list "%g | " '(:eval (run-shell-command "date" t)))
      ;; "[^B%n^b] %W"  ;; Original
      "[^B%n^b] %v^> | %c%M%I %d")

(setf *mode-line-timeout* 1)

(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

;; :click, :ignore, :sloppy
(setf *mouse-focus-policy* :sloppy)

(defun alist-define-keys (map alist)
  "define key using alist."
  (loop for (key . command) in alist
     do (define-key map (kbd key) command)))

(defmacro create-map (var key &key (on *top-map*))
  `(progn
     (defvar ,var (make-sparse-keymap))
     (define-key ,on (kbd ,key) ',var)
     ,var))

(defun string-escape (str)
  "Escape a string"
  (format nil "~S" str))

(defcommand xbacklight (args) ((:string "Arguments: "))
            "Run xbacklight"
            (run-shell-command (format nil "xbacklight ~S" args)))

(alist-define-keys *top-map*
                   '(("s-h" . "move-focus left")
                     ("s-j" . "move-focus down")
                     ("s-k" . "move-focus up")
                     ("s-l" . "move-focus right")

                     ("s-H" . "move-window left")
                     ("s-J" . "move-window down")
                     ("s-K" . "move-window up")
                     ("s-L" . "move-window right")

                     ("s-M-H" . "exchange-direction left")
                     ("s-M-J" . "exchange-direction down")
                     ("s-M-K" . "exchange-direction up")
                     ("s-M-L" . "exchange-direction right")

                     ("s-;" . "colon")

                     ("C-TAB" . "next-in-frame")
                     ("s-TAB" . "fnext")
                     ;; ("M-TAB" . "next")
                     ;; ("s-TAB" . "gnext")
                     ;; ("s-S-TAB" . "pull-hidden-previous")

                     ("s-b" . "mode-line")

                     ("s-r" . "loadrc")

                     ("s-z" . "gprev")
                     ("s-x" . "gnext")

                     ("s-n" . "next-in-frame")
                     ("s-p" . "prev-in-frame")

                     ("S-XF86MonBrightnessUp" . "xbacklight =100%")
                     ("S-XF86MonBrightnessDown" . "xbacklight =3%")
                     ("XF86MonBrightnessUp" . "xbacklight +5%")
                     ("XF86MonBrightnessDown" . "xbacklight -5%")))
(loop for i from 0 to 9
   do (define-key *top-map* (kbd (format nil "s-~A" i)) (format nil "select-window-by-number ~A" i)))

(alist-define-keys (create-map *frame-map* "s-f")
                   '(("f" . "frame-windowlist")
                     ("s-f" . "fother")
                     ("n" . "next-in-frame")
                     ("p" . "prev-in-frame")
                     ("e" . "fclear")))

(alist-define-keys (create-map *window-map* "s-w")
                   '(("h" . "move-focus left")
                     ("j" . "move-focus down")
                     ("k" . "move-focus up")
                     ("l" . "move-focus right")

                     ("q" . "delete")
                     ("Q" . "kill")

                     ("n" . "pull-hidden-next")
                     ("p" . "pull-hidden-previous")

                     ("w" . "windowlist")
                     ("s-w" . "pull-hidden-other")

                     ("s" . "vsplit")
                     ("v" . "hsplit")
                     ("d" . "remove")
                     ("r" . "iresize")))

(alist-define-keys (create-map *window-move-map* "m" :on *window-map*)
                   '(("h" . "move-window left")
                     ("j" . "move-window down")
                     ("k" . "move-window up")
                     ("l" . "move-window right")))

(alist-define-keys (create-map *window-transpose-map* "t" :on *window-map*)
                   '(("h" . "exchange-direction left")
                     ("j" . "exchange-direction down")
                     ("k" . "exchange-direction up")
                     ("l" . "exchange-direction right")))

(alist-define-keys (create-map *group-map* "s-g")
                   '(("g" . "grouplist")
                     ("s-g" . "gother")

                     ("n" . "gnext")
                     ("N" . "gnext-with-window")

                     ("p" . "gprev")
                     ("P" . "gprev-with-window")

                     ("c" . "gnew")
                     ("q" . "gkill")
                     ("r" . "grename")))
(loop for i from 0 to 9
   do (define-key
          *group-map*
          (kbd (format nil "s-~A" i))
        (format nil "gselect ~A" i)))

(defcommand run-firefox () ()
            "Run Firefox"
            (run-or-raise "firefox-bin" '(:class "Firefox")))

(defcommand run-named-terminal (name) ((:string "Name: "))
            "Run terminal"
            (let* ((title (format nil "tmux - ~A" name))
                   (args (list
                          "st"
                          "-t" title ;; Title
                          "-f" "Source Code Pro"
                          "-e" "/usr/bin/tmux" "new-session" "-AD" "-s" name))
                   (cmd (str:join " " (map 'list #'string-escape args))))
              (run-or-raise cmd `(:title ,title))))

(defcommand run-thunderbird () ()
            "Run Thunderbird"
            (run-or-raise "thunderbird-bin" '(:class "Thunderbird")))

(defcommand display-named-emacs (name) ((:string "Name: "))
            "Raise emacs frame with given name"
            (let* ((title (format nil "Emacs - ~A" name))
                   (name-str (format nil "(name . ~S)" title))
                   (title-str (format nil "(title . ~S)" title))
                   (form (format nil "(~A ~A)" name-str title-str))
                   (args (list "/usr/bin/emacsclient" "-c" "-F" (string-escape form)))
                   (cmd (str:join " " args)))
              (run-or-raise cmd `(:title ,title))))

(alist-define-keys (create-map *applications-map* "s-a")
                   '(("f" . "run-firefox")
                     ("t" . "run-named-terminal main")
                     ("m" . "run-thunderbird")))

(alist-define-keys (create-map *applications-emacs* "e" :on *applications-map*)
                   '(("e" . "display-named-emacs main")))
(loop for c across "abcdfghijklmnopqrstuvwxyz0123456789"
   do (define-key *applications-emacs* (kbd (format nil "~C"c)) (format nil "display-named-emacs ~C" c)))

(stumptray:stumptray)
