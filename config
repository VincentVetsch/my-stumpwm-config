;; -*-lisp-*-

(in-package :stumpwm)
(ql:quickload "str")
(ql:quickload "xembed")
(ql:quickload "clx-truetype")

(set-module-dir #P"/home/herbert/opt/stumpwm/contrib/")
(setf *mode-line-position* :bottom)

;; (load-module "app-menu")
;; (load-module "battery-portable")
(load-module "cpu")
(load-module "mem")
(load-module "net")
(load-module "wifi")
(load-module "stumptray")
(load-module "ttf-fonts")

(xft:cache-fonts)
(set-font (make-instance 'xft:font :family "Iosevka Light" :subfamily "Regular" :size 10))

(setf *window-border-style* :thin)
(setf *normal-border-width* 1)

(setf *window-format*
      ;; "%m%n%s%50t" ;; Default
      "%m%s%20c")

(setf *screen-mode-line-format*
      ;; (list "%g | " '(:eval (run-shell-command "date" t)))
      ;; "[^B%n^b] %W"  ;; Original
      "%g | %W^> | %c%M%I %d       ")

(setf *mode-line-timeout* 1)

(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

;; :click, :ignore, :sloppy
(setf *mouse-focus-policy* :sloppy)
(defun temporarilly-disable-sloppy-pointer ()
  "Disable the sloppy pointer for a brief period of time."
  (when (eq *mouse-focus-policy* :sloppy)
    (setf *mouse-focus-policy* :ignore)
    (run-with-timer 0.2 nil #'reenable-sloppy-pointer)))
(defun reenable-sloppy-pointer ()
  (setf *mouse-focus-policy* :sloppy))

(run-commands "grename Emacs"
              "gnewbg Browser"
              "gnewbg Email"
              "gnewbg Terminal"
              "gnewbg Communication"
              "gnewbg Security")

(clear-window-placement-rules)

(define-frame-preference "Browser"
    (0 t   t :class "Firefox")
  (1 t   t :class "Google-chrome"))

(define-frame-preference "Email"
    (0 t   t :class "Thunderbird"))

(define-frame-preference "Communication"
    (0 t   t :class "yakyak"))

(define-frame-preference "Terminal"
    (0 t t :title "tmux - main"))

(define-frame-preference "Security"
    (0 t t :class "keepassxc"))

(defun alist-define-keys (map alist)
  "define key using alist."
  (loop for (key . command) in alist
     do (define-key map (kbd key) command)))

(defmacro create-map (var key &key (on *top-map*))
  `(progn
     (defvar ,var (make-sparse-keymap))
     (define-key ,on (kbd ,key) ',var)
     ,var))

(defun string-escape (str)
  "Escape a string"
  (format nil "~S" str))

(defcommand xbacklight (args) ((:shell "Arguments: "))
            "Run xbacklight"
            (run-shell-command (format nil "xbacklight ~S" args)))

(defcommand amixer (args) ((:shell "Arguments: "))
            "Run amixer"
            (run-shell-command (format nil "amixer ~A" args)))

(defcommand lock () ()
            "Lock session"
            (run-shell-command "dm-tool lock"))

(alist-define-keys *top-map*
                   '(("s-h" . "move-focus left")
                     ("s-j" . "move-focus down")
                     ("s-k" . "move-focus up")
                     ("s-l" . "move-focus right")

                     ("s-H" . "move-window left")
                     ("s-J" . "move-window down")
                     ("s-K" . "move-window up")
                     ("s-L" . "move-window right")

                     ("s-M-H" . "exchange-direction left")
                     ("s-M-J" . "exchange-direction down")
                     ("s-M-K" . "exchange-direction up")
                     ("s-M-L" . "exchange-direction right")

                     ("s-;" . "colon")

                     ("C-TAB" . "next-in-frame")
                     ("s-TAB" . "fnext")

                     ("s-b" . "fullscreen")

                     ("s-r" . "loadrc")

                     ("s-z" . "gprev")
                     ("s-x" . "gnext")

                     ("s-n" . "next-in-frame")
                     ("s-p" . "prev-in-frame")

                     ("s-q" . "session-menu")

                     ("XF86ScreenSaver" . "lock")

                     ("S-XF86MonBrightnessUp" . "xbacklight =100%")
                     ("S-XF86MonBrightnessDown" . "xbacklight =3%")
                     ("XF86MonBrightnessUp" . "xbacklight +5%")
                     ("XF86MonBrightnessDown" . "xbacklight -5%")

                     ("XF86AudioRaiseVolume" . "amixer -c 0 sset Master 1+")
                     ("XF86AudioLowerVolume" . "amixer -c 0 sset Master 1-")

                     ("XF86AudioMute" . "amixer sset Master,0 toggle")

                     ("S-XF86AudioRaiseVolume" . "amixer -c 0 sset Capture 1+")
                     ("S-XF86AudioLowerVolume" . "amixer -c 0 sset Capture 1-")

                     ("XF86AudioMicMute" . "amixer sset Capture,0 toggle")))

(loop for i from 0 to 9
   do (define-key *top-map* (kbd (format nil "s-~A" i)) (format nil "gselect ~A" i)))
(loop for ch in '(#\) #\! #\@ #\# #\$ #\% #\^ #\& #\* #\()
   and i from 0 to 9
   do (define-key *top-map* (kbd (format nil "s-~A" ch)) (format nil "gmove ~A" i)))

(alist-define-keys (create-map *frame-map* "s-f")
                   '(("f" . "frame-windowlist")
                     ("s-f" . "fother")
                     ("n" . "next-in-frame")
                     ("p" . "prev-in-frame")
                     ("e" . "fclear")
                     ("m" . "only")
                     ("=" . "balance-frames")))

(alist-define-keys (create-map *window-map* "s-w")
                   '(("h" . "move-focus left")
                     ("j" . "move-focus down")
                     ("k" . "move-focus up")
                     ("l" . "move-focus right")

                     ("q" . "delete")
                     ("Q" . "kill")

                     ("n" . "pull-hidden-next")
                     ("p" . "pull-hidden-previous")

                     ("w" . "windowlist")
                     ("s-w" . "pull-hidden-other")

                     ("g" . "gmove")
                     ("m" . "only")

                     ("s" . "vsplit")
                     ("v" . "hsplit")
                     ("d" . "remove")
                     ("r" . "iresize")))

(alist-define-keys (create-map *window-move-map* "m" :on *window-map*)
                   '(("h" . "move-window left")
                     ("j" . "move-window down")
                     ("k" . "move-window up")
                     ("l" . "move-window right")))

(alist-define-keys (create-map *window-transpose-map* "t" :on *window-map*)
                   '(("h" . "exchange-direction left")
                     ("j" . "exchange-direction down")
                     ("k" . "exchange-direction up")
                     ("l" . "exchange-direction right")))

(alist-define-keys (create-map *group-map* "s-g")
                   '(("g" . "grouplist")
                     ("s-g" . "gother")

                     ("n" . "gnext")
                     ("N" . "gnext-with-window")

                     ("p" . "gprev")
                     ("P" . "gprev-with-window")

                     ("c" . "gnew")
                     ("q" . "gkill")
                     ("r" . "grename")))
(loop for i from 0 to 9
   do (define-key
          *group-map*
          (kbd (format nil "~A" i))
        (format nil "gselect ~A" i)))

(alist-define-keys (create-map *group-map* "s-s")
                   '(("j" . "stumptray-toggle-hidden-icons-visibility")
                     ("k" . "systray-toggle-icon-hiding")

                     ("h" . "systray-selection-left")
                     ("l" . "systray-selection-right")

                     ("H" . "systray-move-icon-left")
                     ("L" . "systray-move-icon-right")

                     ("s" . "stumptray")))

(defcommand run-firefox () ()
            "Run Firefox"
            (run-or-raise "firefox-bin" '(:class "Firefox")))

(defun named-terminal-title (name)
  "Title for named terminal"
  (format nil "tmux - ~A" name))

(defcommand run-named-terminal (name) ((:string "Name: "))
            "Run terminal"
            (let* ((title (named-terminal-title name))
                   (args (list
                          "st"
                          "-t" title ;; Title
                          "-f" "Source Code Pro"
                          "-e" "/usr/bin/tmux" "new-session" "-AD" "-s" name))
                   (cmd (str:join " " (map 'list #'string-escape args))))
              (run-or-raise cmd `(:title ,title))))

(defcommand run-chrome () ()
            "Run Chrome"
            (run-or-raise "firejail google-chrome-stable" '(:class "Google-chrome")))

(defcommand run-thunderbird () ()
            "Run Thunderbird"
            (run-or-raise "thunderbird-bin" '(:class "Thunderbird")))

(defcommand run-keepassxc () ()
            "Run KeepassXC"
            (run-or-raise "keepassxc" '(:class "keepassxc")))

(defcommand toggle-touchpad () ()
            "Enable/Disable touchpad"
            (run-shell-command "toggle-touchpad"))

(defcommand display-named-emacs (name) ((:string "Name: "))
            "Raise emacs frame with given name"
            (let* ((title (format nil "Emacs - ~A" name))
                   (name-str (format nil "(name . ~S)" title))
                   (title-str (format nil "(title . ~S)" title))
                   (form (format nil "(~A ~A)" name-str title-str))
                   (args (list "/usr/bin/emacsclient" "-c" "-F" (string-escape form)))
                   (cmd (str:join " " args)))
              (run-or-raise cmd `(:title ,title))))

(defcommand run-yakyak () ()
            "Run Yakyak"
            (run-or-raise "yakyak" '(:class "yakyak")))

(defmacro if-sure (&body body)
  `(when (equal :yes (second (select-from-menu (current-screen)
                                               '(("yes" :yes) ("no" :no))
                                               "Are you sure?")))
     ,@body))

(defcommand session-menu () ()
            (let* ((menu '(("cancel" "echo cancelled")
                           ("log out" :quit)
                           ("switch user" :switch-user)
                           ("reboot" :reboot)
                           ("reload" "loadrc")
                           ("poweroff" :poweroff)))
                   (selection (select-from-menu (current-screen) menu "Choose action:")))
              (cond ((null selection)
                     nil)
                    ((stringp (second selection))
                     (run-commands (second selection)))
                    (t (case (second selection)
                         (:quit
                          (if-sure (run-commands "quit")))
                         (:switch-user
                          (if-sure (run-shell-command "dm-tool switch-to-greeter")))
                         (:reboot
                          (if-sure (run-shell-command "systemctl reboot")))
                         (:poweroff
                          (if-sure (run-shell-command "systemctl poweroff")))
                         (otherwise
                          (run-commands (format nil "echo Unknown selection: ~S" (second selection)))))))))

(alist-define-keys (create-map *applications-map* "s-a")
                   '(("f" . "run-firefox")
                     ("c" . "run-chrome")
                     ("k" . "run-keepassxc")
                     ("t" . "run-named-terminal main")
                     ("m" . "run-thunderbird")
                     ("y" . "run-yakyak")))

(alist-define-keys (create-map *applications-emacs* "e" :on *applications-map*)
                   '(("e" . "display-named-emacs main")))
(loop for c across "abcdfghijklmnopqrstuvwxyz0123456789"
   do (define-key *applications-emacs* (kbd (format nil "~C"c)) (format nil "display-named-emacs ~C" c)))

(defun mouse-inside-frame-p (frame)
  "Determine if mouse already inside frame."
  (multiple-value-bind (mouse-x mouse-y window)
      (xlib:global-pointer-position  *display*)
    (let* ((group (current-group))
           (min-x (frame-x frame))
           (min-y (frame-display-y group frame))
           (max-x (+ min-x (frame-width frame)))
           (max-y (+ min-y (frame-display-height group frame))))
      (and (<= min-x mouse-x max-x)
           (<= min-y mouse-y max-y)))))

(defun my-banish-frame (frame)
  "Banish mouse to corner of frame"
  (let* ((group (current-group))
         (x-offset 15)
         (y-offset 15)
         (win-x (frame-x frame))
         (win-y (frame-display-y group frame))
         (w (frame-width frame))
         (h (frame-display-height group frame))
         (x (- (+ win-x w)
               x-offset))
         (y (- (+ win-y h)
               y-offset)))
    (temporarilly-disable-sloppy-pointer)
    (ratwarp x y)))

(defun my-focus-frame-hook (cur-frame last-frame)
  (unless (eq cur-frame last-frame)
    (unless (mouse-inside-frame-p cur-frame)
      (my-banish-frame cur-frame))))

(defun my-split-frame-hook (original-frame a-frame b-frame)
  "Reposition the mouse when a frame is created."
  (my-banish-frame a-frame))

(defun my-remove-split-hook (cur-frame old-frame)
  "Reposition the mouse when a frame is removed."
  (my-banish-frame cur-frame))

;; Clear hooks I use on restart
(remove-all-hooks *focus-frame-hook*)
(remove-all-hooks *split-frame-hook*)
(remove-all-hooks *remove-split-hook*)

(add-hook *focus-frame-hook* #'my-focus-frame-hook)
(add-hook *split-frame-hook* #'my-split-frame-hook)
(add-hook *remove-split-hook* #'my-remove-split-hook)
